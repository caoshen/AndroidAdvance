if (isRunAlone.toBoolean()) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 31
    buildToolsVersion "31.0.0"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        multiDexEnabled true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    // data binding
    dataBinding {
        enabled = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
        freeCompilerArgs = ['-Xjvm-default=all-compatibility']
    }

    buildFeatures {
        viewBinding true
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion compose_version
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {
    // Work manager
    implementation deps.workmanager.workRuntimeKtx
    implementation deps.workmanager.workRxjava2
    implementation deps.workmanager.workGcm
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.material:material:$compose_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_version"
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.3.1'
    implementation 'androidx.activity:activity-compose:1.3.1'
    androidTestImplementation deps.workmanager.workTesting

    // Room components
    implementation deps.room.roomKtx
    implementation deps.room.roomRxjava2
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"
    debugImplementation "androidx.compose.ui:ui-tooling:$compose_version"
    kapt deps.room.roomCompiler
    androidTestImplementation deps.room.roomTesting

    // Lifecycle components
    implementation deps.lifecycle.viewmodelKtx
    implementation deps.lifecycle.livedataKtx
    implementation deps.lifecycle.commonJava8

    // Kotlin components
    implementation deps.kotlin.stdlibJdk7
    api deps.kotlin.coroutinesCore
    api deps.kotlin.coroutinesAndroid
    implementation deps.core.coreKtx

    // UI
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation deps.ui.activityKtx
    implementation deps.ui.constraintlayout
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation deps.ui.material

    // compose
    implementation deps.navigation.navigationCompose

    // Testing
    testImplementation deps.testing.junit
    androidTestImplementation deps.testing.coreTesting
    androidTestImplementation(deps.testing.espressoCore, {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestImplementation deps.testing.testExtJunit

    // multidex
    implementation 'com.android.support:multidex:1.0.3'

    implementation deps.network.retrofit
    implementation deps.network.converterGson
    implementation deps.network.adapterRxjava
    implementation deps.fragment.fragmentKtx

    implementation "androidx.constraintlayout:constraintlayout-compose:1.1.0-alpha03"

    // rxjava
    implementation deps.rx.rxjava
    implementation deps.rx.rxandroid

    implementation project(':baselib')
    implementation project(':performance')

    debugImplementation deps.leakcanary
}

task changeVersion(dependsOn: ':jetpack:assembleRelease') {
    doFirst {
        def statusPro = "git symbolic-ref --short -q HEAD".execute()
        println "git symbolic-ref --short -q HEAD:\n" + statusPro.inputStream.text
        def name = "${android.defaultConfig.versionName}-$statusPro"
        android.defaultConfig.versionName name
    }
}


// Map for the version code that gives each ABI a value.
ext.abiCodes = ['armeabi-v7a':1, mips:2, x86:3]


android.applicationVariants.all { variant ->
    variant.outputs.each { output ->
        def branch =
                // Determines the ABI for this variant and returns the mapped value.
                "git symbolic-ref --short -q HEAD".execute().inputStream.text.trim()
        if (branch != null) {
            output.versionNameOverride =
                    "${variant.versionName}-br-${branch}"
        }
    }
}