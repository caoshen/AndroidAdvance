if (isRunAlone.toBoolean()) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}
//plugins {
//    id 'com.android.library'
//}
apply plugin: 'kotlin-android'

def abiFiltersForWrapScript = ['arm64-v8a']
def SupportedABIs = ['arm64-v8a']
def useASAN = true
//    ndkDir = properties.getProperty('ndk.dir')
def ndkDir = "/Users/caoshen/Library/Android/sdk/ndk/22.1.7171670"

android {
    compileSdkVersion 31
    buildToolsVersion "31.0.0"

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"

        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a'
        }
        externalNativeBuild {
            cmake {
                cppFlags "-std=c++11 -frtti -fexceptions -g"
                abiFilters.addAll(SupportedABIs)
            }
        }
    }

    buildTypes {
        debug {
            minifyEnabled false

            externalNativeBuild {
                cmake {
                    if (useASAN)
                    //CMake 一共有2种编译工具链 - clang 和 gcc
                        arguments "-DUSEASAN=ON", "-DANDROID_TOOLCHAIN=clang"
                }
            }
            packagingOptions {
                doNotStrip "**.so"
                if (useASAN && abiFiltersForWrapScript) {
                    def exclude_abis = ["armeabi", "armeabi-v7a", "arm64-v8a", "x86", "x86_64", "mips", "mips64"]
                            .findAll { !(it in abiFiltersForWrapScript) }
                            .collect { "**/" + it + "/wrap.sh" }
                    excludes += exclude_abis
                }
                exclude '**/libbytehook.so'
            }

            if (useASAN) {
                sourceSets {
                    main {
                        jniLibs {
                            srcDir {
                                "asan/libs"
                            }
                        }
                        resources {
                            srcDir {
                                "asan/res"
                            }
                        }
                    }
                }
            }
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.6.0"
        }
    }
    ndkVersion "22.1.7171670"

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    // https://google.github.io/prefab/
    buildFeatures {
        prefab true
    }
}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    implementation deps.core.coreKtx
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
//    implementation 'com.github.bytedance:memory-leak-detector:0.1.8'

    implementation 'com.bytedance:bytehook:1.0.7'
}
repositories {
//    maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
    mavenCentral()
}

task copyAsanLibs(type: Copy) {
    def libDir = file("$ndkDir").absolutePath + "/toolchains/llvm/prebuilt/"
    for (String abi : SupportedABIs) {
        def dir = new File("${project.projectDir}/asan/libs/" + abi)
        dir.mkdirs()
        println "copy to $dir from $libDir"
        if (abi == 'armeabi-v7a' || abi == 'armeabi')
            abi = "arm"
        if (abi == "arm64-v8a")
            abi = "aarch64"
        FileTree tree = fileTree(dir: libDir).include("**/*asan*${abi}*.so")
        tree.each { File file ->
            println "from ${file.absolutePath} to ${dir.absolutePath}"
            from file
            into dir.absolutePath
        }
    }
}

//这个task将会被generate所依赖
task createAsanHelpUtilScript(dependsOn: copyAsanLibs) {
    for (String abi : SupportedABIs) {
        def dir = new File("${project.projectDir}/asan/res/lib/" + abi)
        dir.mkdirs()
        def helpFile = new File(dir, "wrap.sh")
        generateHelpUtil(helpFile, abi)
        println "helpFile file path " + helpFile.path
    }
}

static def generateHelpUtil(file, abi) {
    if (abi == "armeabi" || abi == "armeabi-v7a")
        abi = "arm"
    if (abi == "arm64-v8a")
        abi = "aarch64"
    file.withWriter { writer ->
        writer.write('#!/system/bin/sh\n')
        writer.write('HERE="$(cd "$(dirname "$0")" && pwd)"\n')
        writer.write('export ASAN_OPTIONS=log_to_syslog=false,allow_user_segv_handler=1\n')
        writer.write('export ASAN_ACTIVATION_OPTIONS=include_if_exists=/data/local/tmp/asan.options.b\n')
        //LD_PRELOAD的本意是，允许程序优先加载指定的动态库
        writer.write("export LD_PRELOAD=\$HERE/libclang_rt.asan-${abi}-android.so\n")
        writer.write('\$@\n')
    }
}